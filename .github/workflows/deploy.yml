name: Deploy To Prod

on:
  push:
    branches:
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version and Build
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Create .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "NCP_ENDPOINT=${{ secrets.NCP_ENDPOINT }}" >> .env
          echo "NCP_ACCESS_KEY_ID=${{ secrets.NCP_ACCESS_KEY_ID }}" >> .env
          echo "NCP_SECRET_ACCESS_KEY=${{ secrets.NCP_SECRET_ACCESS_KEY }}" >> .env
          echo "NCP_REGION=${{ secrets.NCP_REGION }}" >> .env
          echo "NCP_BUCKET=${{ secrets.NCP_BUCKET }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_REDIRECT_DEV_URI=${{ secrets.KAKAO_REDIRECT_DEV_URI }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "FRONTEND_DEV_URL=${{ secrets.FRONTEND_DEV_URL }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "CLOVASTUDIO_API_KEY=${{ secrets.CLOVASTUDIO_API_KEY }}" >> .env
          echo "OBJECT_STORAGE_PATTERN=${{ secrets.OBJECT_STORAGE_PATTERN }}" >> .env
          echo "CDN_PATTERN=${{ secrets.CDN_PATTERN }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build, tag, and push image
        id: build-image
        env:
          DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
          REPOSITORY_NAME: ${{ secrets.DOCKER_REPOSITORY_NAME }}
          IMAGE_TAG: ${{  steps.tag_version.outputs.new_tag }}
        run: |
          DOCKER_IMAGE="$DOCKER_REGISTRY_URL/$REPOSITORY_NAME"

          docker build -t $DOCKER_IMAGE:$IMAGE_TAG .
          docker image tag $DOCKER_IMAGE:$IMAGE_TAG $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:$IMAGE_TAG
          docker push $DOCKER_IMAGE:latest

      - name: SSH Remote Commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_ADDRESS }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.HOST_KEY }}
          port: ${{ secrets.HOST_PORT }}
          script: |
            DOCKER_REGISTRY_URL=${{ secrets.DOCKER_REGISTRY_URL }}
            REPOSITORY_NAME=${{ secrets.DOCKER_REPOSITORY_NAME }}
            PORT=${{secrets.PORT}}
            DOCKER_IMAGE="$DOCKER_REGISTRY_URL/$REPOSITORY_NAME"

            echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker pull $DOCKER_IMAGE:latest

            docker stop $DOCKER_REGISTRY_URL || true
            docker rm $DOCKER_REGISTRY_URL || true

            docker run -d --name $DOCKER_REGISTRY_URL -p $PORT:$PORT $DOCKER_IMAGE:latest
